/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package panel;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.LayoutManager;
import java.awt.Toolkit;
import java.awt.event.AWTEventListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.MemoryImageSource;
import java.awt.image.PixelGrabber;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.GroupLayout;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.JTextField;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import manejoDatos.Barra2;
import manejoDatos.dameDatos;

/**
 *
 * @author zassu
 */
public class Panel extends javax.swing.JFrame {

    private final JFileChooser Buscar = new JFileChooser();
    private final Toolkit t = Toolkit.getDefaultToolkit();
    private final Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
    private final int anchosc = java.awt.Toolkit.getDefaultToolkit().getScreenSize().width;
    private final int largosc = java.awt.Toolkit.getDefaultToolkit().getScreenSize().height;
    private final FrameDatos FrNvo = new FrameDatos();
    public Icon bfImageglobal;
    private int X, Y, R, G, B, an, lar;
    public dameDatos datos = new dameDatos();
    private final int[] rini = new int[256];
    private int[] gini = new int[256];
    private int[] bini = new int[256];
    private Color colorin;
    public boolean imgGuardada = false;

    BufferedImage bimg;
    public Image tempImage;
    private int brilloNum = 0;
    private int negativoNum = 0;

    private String rutaGuardar;

    public String getRutaGuardar() {
        return rutaGuardar;
    }

    public void setRutaGuardar(String rutaGuardar) {
        this.rutaGuardar = rutaGuardar;
    }

    private String ext;

    public String getExt() {
        return ext;
    }

    public void setExt(String ext) {
        this.ext = ext;
    }

    private String rutaImagen = "";

    public String getRutaImagen() {
        return rutaImagen;
    }

    public void setRutaImagen(String rutaImagen) {
        this.rutaImagen = rutaImagen;
    }

    private int[][] matriz3x3;

    public int[][] getMatriz3x3() {
        return matriz3x3;
    }

    public void setMatriz3x3(int[][] matriz3x3) {
        this.matriz3x3 = matriz3x3;
    }





    Barra2 frame;

    public int getAn() {
        return an;
    }

    public void setAn(int an) {
        this.an = an;
    }

    public int getLar() {
        return lar;
    }

    public void setLar(int lar) {
        this.lar = lar;
    }

    public int getX() {
        return X;
    }

    public void setX(int X) {
        this.X = X;
    }

    public int getY() {
        return Y;
    }

    public void setY(int Y) {
        this.Y = Y;
    }

    public int getR() {
        return R;
    }

    public void setR(int R) {
        this.R = R;
    }

    public int getG() {
        return G;
    }

    public void setG(int G) {
        this.G = G;
    }

    public int getB() {
        return B;
    }

    public void setB(int B) {
        this.B = B;
    }

    /**
     * Creates new form Panel
     */
    public Panel() {
        initComponents();
        setExtendedState(NORMAL);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelImg = new javax.swing.JLabel();
        barraMenu = new javax.swing.JMenuBar();
        Archivo = new javax.swing.JMenu();
        Cargar = new javax.swing.JMenuItem();
        Guardar = new javax.swing.JMenuItem();
        GuardaComo = new javax.swing.JMenuItem();
        Salir = new javax.swing.JMenuItem();
        Editar = new javax.swing.JMenu();
        menuMatrices = new javax.swing.JMenu();
        menuMat3x3 = new javax.swing.JMenuItem();
        Ver = new javax.swing.JMenu();
        datosWindow = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Manejo de Imagenes");
        setLocation(new java.awt.Point(100, 200));
        setResizable(false);
        setSize(new java.awt.Dimension(650, 450));

        labelImg.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        labelImg.setMaximumSize(new java.awt.Dimension(1200, 800));
        labelImg.setMinimumSize(new java.awt.Dimension(666, 419));
        labelImg.setName("labelImg"); // NOI18N
        labelImg.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                labelImgMouseMoved(evt);
            }
        });

        Archivo.setText("Archivo");

        Cargar.setText("Cargar Imagen");
        Cargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CargarActionPerformed(evt);
            }
        });
        Archivo.add(Cargar);

        Guardar.setText("Guardar");
        Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarActionPerformed(evt);
            }
        });
        Archivo.add(Guardar);

        GuardaComo.setText("Guardar como...");
        GuardaComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardaComoActionPerformed(evt);
            }
        });
        Archivo.add(GuardaComo);

        Salir.setText("Salir");
        Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirActionPerformed(evt);
            }
        });
        Archivo.add(Salir);

        barraMenu.add(Archivo);

        Editar.setText("Editar");

        menuMatrices.setText("Matriz");

        menuMat3x3.setText("Matriz 3x3");
        menuMat3x3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuMat3x3ActionPerformed(evt);
            }
        });
        menuMatrices.add(menuMat3x3);

        Editar.add(menuMatrices);

        barraMenu.add(Editar);

        Ver.setText("Ver");
        Ver.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        datosWindow.setText("Datos");
        datosWindow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                datosWindowActionPerformed(evt);
            }
        });
        Ver.add(datosWindow);

        barraMenu.add(Ver);

        setJMenuBar(barraMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelImg, javax.swing.GroupLayout.PREFERRED_SIZE, 655, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelImg, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        labelImg.getAccessibleContext().setAccessibleName("labelImg");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CargarActionPerformed
        // TODO add your handling code here:
        Buscar.setDialogTitle("Seleccionar Imagen");
        FileNameExtensionFilter ext = new FileNameExtensionFilter("Imagen :bmp, dib, gif,jpg, jpeg, jpe, jfif,png", "bmp", "dib", "gif",
                "jpg", "jpeg", "jpe", "jfif", "png");
        Buscar.setFileFilter(ext);

        for (int x = 0; x < 256; x++) {
            rini[x] = 0;
            gini[x] = 0;
            bini[x] = 0;
        }

        datos.setRed(rini);
        datos.setGreen(gini);
        datos.setBlue(bini);

        if (Buscar.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {

            ImageIcon img = new ImageIcon(Buscar.getSelectedFile().getPath());

            BufferedImage imagenbuf = null;
            try {
                imagenbuf = ImageIO.read(new File(Buscar.getSelectedFile().getPath()));
                bimg = ImageIO.read(new File(Buscar.getSelectedFile().getPath()));
            } catch (IOException | ArrayIndexOutOfBoundsException ex) {
                Logger.getLogger(Panel.class.getName()).log(Level.SEVERE, null, ex);
            }
            bfImageglobal = new ImageIcon(img.getImage().getScaledInstance(labelImg.getWidth(), labelImg.getHeight(), Image.SCALE_SMOOTH));
            labelImg.setIcon(bfImageglobal);
            setAn(bfImageglobal.getIconWidth());
            setLar(bfImageglobal.getIconHeight());

            datos.setAncho(an);
            datos.setLargo(lar);
            
            try{

            for (int i = 0; i <= imagenbuf.getWidth(); i++) {
                for (int j = 0; j <= imagenbuf.getHeight(); j++) {
                    colorin = new Color(imagenbuf.getRGB(i, j));
                    rini[colorin.getRed()] += 1;
                    gini[colorin.getGreen()] += 1;
                    bini[colorin.getBlue()] += 1;
                }
            }

            datos.setRed(rini);
            datos.setGreen(gini);
            datos.setBlue(bini);

            datos.setImagen((Image) bfImageglobal);
            
            }catch (ArrayIndexOutOfBoundsException ex) {
                Logger.getLogger("No se encuentra imagen");
            }

            this.repaint();

        }

        FrNvo.setDatos(teVanDatos(datos));

    }//GEN-LAST:event_CargarActionPerformed

    private void datosWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_datosWindowActionPerformed
        // TODO add your handling code here:

        FrNvo.setVisible(true);


    }//GEN-LAST:event_datosWindowActionPerformed

    private void SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_SalirActionPerformed

    private void labelImgMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelImgMouseMoved
        // TODO add your handling code here:      
        try {
            ImageIcon imagen = new ImageIcon(Buscar.getSelectedFile().getPath());
            bfImageglobal = new ImageIcon(imagen.getImage().getScaledInstance(labelImg.getWidth(), labelImg.getHeight(), Image.SCALE_SMOOTH));
            ImageIcon nuevo = (ImageIcon) bfImageglobal;

            FrNvo.getDatos().setRed(rini);

            PixelGrabber Grabber = new PixelGrabber(nuevo.getImage(), evt.getX(), evt.getY(), labelImg.getIcon().getIconWidth(), labelImg.getIcon().getIconHeight(), true);

            if (Grabber.grabPixels()) {
                Object pixels = Grabber.getPixels();
                int red = ColorModel.getRGBdefault().getRed(pixels);
                int green = ColorModel.getRGBdefault().getGreen(pixels);
                int blue = ColorModel.getRGBdefault().getBlue(pixels);

                //   System.out.println(Grabber.getWidth()+" "+ Grabber.getHeight());
                setX(evt.getX());
                setY(evt.getY());
                setR(red);
                setG(green);
                setB(blue);

                datos.setCoodY(evt.getY());
                datos.setCoordX(evt.getX());
                datos.setPxgR(R);
                datos.setPxgG(G);
                datos.setPxgB(B);

                teVanDatos(datos);

                FrNvo.setDatos(teVanDatos(datos));

            }
        } catch (NullPointerException | InterruptedException | ArrayIndexOutOfBoundsException ex) {
            // Logger.getLogger(Panel.class.getName()).log(Level.SEVERE, null, ex);
            Logger.getLogger("No se encontró imágen");
        }

        FrNvo.getDatos().setEvt(evt);
        FrNvo.mouseMoved(FrNvo.getDatos().getEv());
    }//GEN-LAST:event_labelImgMouseMoved

    private void GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarActionPerformed
        try {
            // TODO add your handling code here:
            saveImage();
        } catch (IOException ex) {
            Logger.getLogger(Panel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_GuardarActionPerformed

    private void GuardaComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardaComoActionPerformed
        try {
            // TODO add your handling code here:
            saveImageAs();
        } catch (IOException ex) {
            Logger.getLogger(Panel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_GuardaComoActionPerformed

    private void menuMat3x3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuMat3x3ActionPerformed
        // TODO add your handling code here:
        aplicarMatriz();
    }//GEN-LAST:event_menuMat3x3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Panel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Archivo;
    private javax.swing.JMenuItem Cargar;
    private javax.swing.JMenu Editar;
    private javax.swing.JMenuItem GuardaComo;
    private javax.swing.JMenuItem Guardar;
    private javax.swing.JMenuItem Salir;
    private javax.swing.JMenu Ver;
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JMenuItem datosWindow;
    private javax.swing.JLabel labelImg;
    private javax.swing.JMenuItem menuMat3x3;
    private javax.swing.JMenu menuMatrices;
    // End of variables declaration//GEN-END:variables

    public dameDatos teVanDatos(dameDatos dat) {

        dat.setNombre(Buscar.getSelectedFile().getName());
        dat.setCoordX(getX());
        dat.setCoodY(getY());
        dat.setPxgR(getR());
        dat.setPxgG(getG());
        dat.setPxgB(getB());
        dat.setAncho(getAn());
        dat.setLargo(getLar());

        return dat;
    }

   

    public void saveImageAs() throws IOException {
        if (tempImage != null) {
            datos.setImagen(tempImage);
            tempImage = null;
        }
        JFileChooser jfc = new JFileChooser("Guardar Cómo");
        int res = jfc.showSaveDialog(this);
        getExtensionFile(Buscar.getSelectedFile().getName());
        if (res == 0) {
            setRutaGuardar(cambiarTipoRuta(jfc.getSelectedFile().getPath() + "." + this.getExt()));
            File newFile = new File(rutaGuardar);
            ImageIO.write(convertToBufferedImage(datos.getImagen()), ext, newFile);
        } else {
            JOptionPane.showMessageDialog(this, "No se guardo imagen", "Error", JOptionPane.ERROR_MESSAGE);
        }
        imgGuardada = true;
    }

    public void saveImage() throws IOException {
        if (tempImage != null) {
            datos.setImagen(tempImage);
            tempImage = null;
        }
        if (imgGuardada == false) {
            saveImageAs();
        } else {
            File newFile = new File(rutaGuardar);
            ImageIO.write(convertToBufferedImage(datos.getImagen()), ext, newFile);
        }
    }

    public String getExtensionFile(String name) {
        String extension = "";
        char[] cs = name.toCharArray();
        int cont = 0;
        for (int i = 0; i < cs.length; i++) {
            if (cs[i] == '.') {
                cont++;
            }
        }

        int cont2 = 0;
        for (int i = 0; i < cs.length; i++) {
            if (cont2 == cont) {
                extension += cs[i];
            }
            if (cs[i] == '.') {
                cont2++;
            }
        }
        ext = extension;
        return extension;
    }

    public String cambiarTipoRuta(String ruta) {
        char[] rutaAr = ruta.toCharArray();
        String rutaCambio = "";
        for (int i = 0; i < rutaAr.length; i++) {
            if (rutaAr[i] == '\\') {
                rutaAr[i] = '/';
            }
            rutaCambio += rutaAr[i];
        }
        setRutaImagen(rutaCambio);
        return rutaCambio;
    }

    public BufferedImage convertToBufferedImage(Image image) {
        try{
        BufferedImage newImage = new BufferedImage(
                image.getWidth(null), image.getHeight(null),
                BufferedImage.TYPE_INT_ARGB);
        Graphics2D g = newImage.createGraphics();
        g.drawImage(image, 0, 0, null);
        g.dispose();
        return newImage;
        }catch(IllegalArgumentException ex){
            Logger.getLogger("no se encuentra imagen");
            return null;
        }
        
    }






    private void aplicarMatriz() {
        JOptionPane jop = new JOptionPane("Selecionar filtro digital 3x3");
        JPanel panel = new JPanel();
        JCheckBox borde = new JCheckBox("Filtro 1");
        JCheckBox laplace = new JCheckBox("Filtro 2");
        JCheckBox SobelHz = new JCheckBox("Filtro 3");
        JCheckBox SobelVt = new JCheckBox("Filtro 4");
        JCheckBox PrewittHz = new JCheckBox("Filtro 5");

        borde.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                if (borde.isSelected()) {
                    laplace.setSelected(false);
                    SobelHz.setSelected(false);
                    SobelVt.setSelected(false);
                    PrewittHz.setSelected(false);
                    refresh();
                    aplicarMatriz(0);
                } else {
                    tempImage = null;
                    repaint();
                }
            }
        });
        panel.add(borde);

        laplace.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                if (laplace.isSelected()) {
                    borde.setSelected(false);
                    SobelHz.setSelected(false);
                    SobelVt.setSelected(false);
                    PrewittHz.setSelected(false);
                    refresh();
                    aplicarMatriz(1);
                } else {
                    tempImage = null;
                    repaint();
                }
            }
        });
        panel.add(laplace);

        SobelHz.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                if (SobelHz.isSelected()) {
                    laplace.setSelected(false);
                    borde.setSelected(false);
                    SobelVt.setSelected(false);
                    PrewittHz.setSelected(false);

                    refresh();
                    aplicarMatriz(2);
                } else {
                    tempImage = null;
                    repaint();
                }
            }
        });
        panel.add(SobelHz);

        SobelVt.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                if (SobelVt.isSelected()) {
                    laplace.setSelected(false);
                    borde.setSelected(false);
                    SobelHz.setSelected(false);
                    PrewittHz.setSelected(false);

                    refresh();
                    aplicarMatriz(3);
                } else {
                    tempImage = null;
                    repaint();
                }
            }
        });
        panel.add(SobelVt);

        PrewittHz.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                if (PrewittHz.isSelected()) {
                    laplace.setSelected(false);
                    borde.setSelected(false);
                    SobelVt.setSelected(false);
                    SobelHz.setSelected(false);

                    refresh();
                    aplicarMatriz(4);
                } else {
                    tempImage = null;
                    repaint();
                }
            }
        });
        panel.add(PrewittHz);


        int res = jop.showConfirmDialog(null, panel, "Selecionar Filtro 3x3", JOptionPane.WARNING_MESSAGE);

        if (res == 0) {

            ImageIcon aiuda = new ImageIcon(datos.getImagen().getScaledInstance(labelImg.getWidth(), labelImg.getHeight(), Image.SCALE_SMOOTH));
            labelImg.setIcon(aiuda);
            tempImage = null;
            this.repaint();
        } else {
            tempImage = null;
        }
        this.repaint();
    }

    private void aplicarMatriz(int mat) {
        switch (mat) {
            case 0:
                int[][] borde = {
                    {-1, -1, -1},
                    {-1, 8, -1},
                    {-1, -1, -1}};
                aplicarFiltro(borde);
                break;
            case 1:
                int[][] laplace = {
                    {0, -1, 0},
                    {-1, 4, -1},
                    {0, -1, 0}};
                aplicarFiltro(laplace);
                break;
            case 2:
                int[][] sobelHz = {
                    {-1, -2, -1},
                    {0, 0, 0},
                    {1, 2, 1}};
                aplicarFiltro(sobelHz);
                break;
            case 3:
                int[][] sobelVt = {
                    {25, 10, 30},
                    {-10, -10, -10},
                    {-25, -20, -23}};
                aplicarFiltro(sobelVt);
                break;
            case 4:
                int[][] prewittHz = {
                    {22, 10, 4},
                    {22, 11, 6},
                    {100, 20, 10}};
                aplicarFiltro(prewittHz);
                break;
        }

        this.repaint();
    }

    public void barra(int max) {
        frame = new Barra2(max);
        frame.pack();
        frame.setVisible(true);
    }

    public void contarBarra() {
        frame.oneMore();
    }

    public void eliminarBarra() {
        frame.eliminar();
    }



    private void aplicarFiltro(int[][] matriz) {
        try{
        BufferedImage image = convertToBufferedImage(datos.getImagen());
        Color[][] temimage;
        int width = image.getWidth();
        int height = image.getHeight();
        temimage = new Color[width][height];

        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                int pixel = image.getRGB(x, y);
                int r = (pixel >> 16) & 0xff;
                int g = (pixel >> 8) & 0xff;
                int b = pixel & 0xff;

                temimage[x][y] = new Color(r, g, b);
                image.setRGB(x, y, pixel);
            }
        }
        barra(height - 2);

        for (int y = 1; y < height - 1; y++) {
            contarBarra();
            for (int x = 1; x < width - 1; x++) {
                int pxR = (matriz[0][0] * temimage[x - 1][y - 1].getRed() + matriz[0][1] * temimage[x][y - 1].getRed() + matriz[0][2] * temimage[x + 1][y - 1].getRed()
                        + matriz[1][0] * temimage[x - 1][y].getRed() + matriz[1][1] * temimage[x][y].getRed() + matriz[1][2] * temimage[x + 1][y].getRed()
                        + matriz[2][0] * temimage[x - 1][y + 1].getRed() + matriz[2][1] * temimage[x][y + 1].getRed() + matriz[2][2] * temimage[x + 1][y + 1].getRed());
                pxR = (int) Math.sqrt(pxR * pxR);
                if (pxR > 255) {
                    pxR = 255;
                }
                if (pxR < 0) {
                    pxR = 0;
                }

                int pxG = (matriz[0][0] * temimage[x - 1][y - 1].getGreen() + matriz[0][1] * temimage[x][y - 1].getGreen() + matriz[0][2] * temimage[x + 1][y - 1].getGreen()
                        + matriz[1][0] * temimage[x - 1][y].getGreen() + matriz[1][1] * temimage[x][y].getGreen() + matriz[1][2] * temimage[x + 1][y].getGreen()
                        + matriz[2][0] * temimage[x - 1][y + 1].getGreen() + matriz[2][1] * temimage[x][y + 1].getGreen() + matriz[2][2] * temimage[x + 1][y + 1].getGreen());
                pxG = (int) Math.sqrt(pxG * pxG);
                if (pxG > 255) {
                    pxG = 255;
                }
                if (pxG < 0) {
                    pxG = 0;
                }

                int pxB = (matriz[0][0] * temimage[x - 1][y - 1].getBlue() + matriz[0][1] * temimage[x][y - 1].getBlue() + matriz[0][2] * temimage[x + 1][y - 1].getBlue()
                        + matriz[1][0] * temimage[x - 1][y].getBlue() + matriz[1][1] * temimage[x][y].getBlue() + matriz[1][2] * temimage[x + 1][y].getBlue()
                        + matriz[2][0] * temimage[x - 1][y + 1].getBlue() + matriz[2][1] * temimage[x][y + 1].getBlue() + matriz[2][2] * temimage[x + 1][y + 1].getBlue());
                pxB = (int) Math.sqrt(pxB * pxB);
                if (pxB > 255) {
                    pxB = 255;
                }
                if (pxB < 0) {
                    pxB = 0;
                }
                Color pixel = new Color(pxR, pxG, pxB);
                image.setRGB(x, y, pixel.getRGB());
            }
        }
        tempImage = (Image) image;
        datos.setImagen(tempImage);
        ImageIcon aiuda = new ImageIcon(datos.getImagen().getScaledInstance(labelImg.getWidth(), labelImg.getHeight(), Image.SCALE_SMOOTH));
        labelImg.setIcon(aiuda);

        eliminarBarra();
        this.repaint();
        }catch(NullPointerException e){
            Logger.getLogger("Error");
        }
    }

    private void refresh() {
        String ruta = Buscar.getSelectedFile().getPath();
        datos.setImagen(Toolkit.getDefaultToolkit().getImage(cambiarTipoRuta(ruta)));
        tempImage = null;
        brilloNum = 0;
        negativoNum = 0;

        repaint();
    }
}
